<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog一键创建和部署命令</title>
    <url>/2022/10/15/Blog%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p> 使用bat脚本创建和部署Blog</p>
<h1 id="创建blog脚本"><a href="#创建blog脚本" class="headerlink" title="创建blog脚本"></a>创建blog脚本</h1><p>创建blog文件，检测文件名是否重复，用typora打开。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">E:</span><br><span class="line"><span class="built_in">cd</span> E:\Blog</span><br><span class="line">:setname</span><br><span class="line"><span class="built_in">set</span> /p name=输入Blog名称:</span><br><span class="line"><span class="built_in">echo</span> name:%name%</span><br><span class="line"><span class="built_in">echo</span> 等待创建。。。</span><br><span class="line"><span class="keyword">if</span> exist <span class="string">&quot;E:\Blog\source\_posts\%name%.md&quot;</span> <span class="built_in">echo</span> 文件已存在，请重新创建! &amp;&amp;goto setname</span><br><span class="line">hexo new post %name% &amp;&amp; start typora <span class="string">&quot;E:\Blog\source\_posts\%name%.md&quot;</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h1 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line">E:</span><br><span class="line"><span class="built_in">cd</span> E:\Blog</span><br><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</span><br></pre></td></tr></table></figure>

<h1 id="本地预览脚本"><a href="#本地预览脚本" class="headerlink" title="本地预览脚本"></a>本地预览脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line">E:</span><br><span class="line"><span class="built_in">cd</span> E:\Blog</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>UART接口及verilog代码实现</title>
    <url>/2022/10/15/uart%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="协议介绍"><a href="#协议介绍" class="headerlink" title="协议介绍"></a>协议介绍</h2><p><strong>通用异步收发器</strong>（Universal Asynchronous Receiver&#x2F;Transmitter)，通常称作<strong>UART，是一种串行、异步、全双工的通信协议</strong>，在嵌入式领域应用的非常广泛。</p>
<p>　　UART作为异步串行通信协议的一种，工作原理是将传输数据的每个二进制位一位接一位地传输。在UART通信协议中信号线上的状态为高电平时代表‘1’，信号线上的状态为低电平时代表‘0’。比如使用UART通信协议进行一个字节数据的传输时就是在信号线上产生八个高低电平的组合。</p>
<ul>
<li>串行通信是指利用一条传输线将数据一位位地顺序传送，也可以用两个信号线组成全双工通信，如rs232。特点是通信线路简单，利用简单的线缆就可实现通信，降低成本，适用于远距离通信，但传输速度慢的应用场合。</li>
<li>异步通信以一个字符为传输单位，通信中两个字符间的时间间隔多少是不固定的，然而在同一个字符中的两个相邻位间的时间间隔是固定的。通俗说是两个uart设备之间通信的时候不需要时钟线，这时候就需要在两个uart设备上指定相同的传输速率，以及空闲位、起始位、校验位、结束位，也就是遵循相同的协议。</li>
<li>数据传送速率用波特率来表示，即每秒钟传送的二进制位数。例如数据传送速率为120字符&#x2F;秒，而每一个字符为10位（1个起始位，8个数据位，1个校验位，1个结束位），则其传送的波特率为10×120＝1200字符&#x2F;秒＝1200波特。</li>
</ul>
<p>数据通信格式如下图：</p>
<p><img src="https://pic1.zhimg.com/80/v2-2ebc83957b33a1525468eed46d3139c8_720w.jpg" alt="img"></p>
<p>其中各位的意义如下：</p>
<p><strong>空闲位：</strong></p>
<p>　　UART协议规定，当总线处于空闲状态时信号线的状态为‘1’即高电平，表示当前线路上没有数据传输。</p>
<p><strong>起始位：</strong></p>
<p>　　每开始一次通信时发送方先发出一个逻辑”0”的信号（低电平），表示传输字符的开始。因为总线空闲时为高电平所以开始一次通信时先发送一个明显区别于空闲状态的信号即低电平。<strong>起始位的意义是每次发送都做一次时钟同步。</strong></p>
<p><strong>数据位：</strong></p>
<p>　　起始位之后就是我们所要传输的数据，数据位可以是5、6、7、8，9位等，构成一个字符（一般都是8位）。如ASCII码（7位），扩展BCD码（8位）。先发送<strong>最低位</strong>，最后发送<strong>最高位</strong>，使用低电平表示‘0’高电平表示‘1’完成数据位的传输。</p>
<p><strong>奇偶校验位：</strong></p>
<p>　　数据位加上这一位后，使得“1”的位数应为偶数(偶校验)或奇数(奇校验)，以此来校验数据传送的正确性。校验位其实是调整个数，串口校验分几种方式：</p>
<ul>
<li>1、无校验（no parity）。</li>
<li>2、奇校验（odd parity）：如果数据位中“1”的数目是偶数，则校验位为“1”，如果“1”的数目是奇数，校验位为“0”。</li>
<li>3、偶校验（even parity）：如果数据为中“1”的数目是偶数，则校验位为“0”，如果为奇数，校验位为“1”。</li>
<li>4、mark parity：校验位始终为1（不常用）。</li>
<li>5、parity：校验位始终为0（不常用）。</li>
</ul>
<p><strong>停止位：</strong></p>
<p>　　它是一个字符数据的结束标志。可以是1位、1.5位、2位的高电平。 由于数据是在传输线上定时的，并且每一个设备有其自己的时钟，很可能在通信中两台设备之间出现了小小的不同步。因此停止位不仅仅是表示传输的结束，并且提供计算机校正时钟的机会。停止位个数越多，数据传输越稳定，但是数据传输速度也越慢。</p>
<p><strong>波特率：</strong></p>
<p>数据传输速率使用波特率来表示。单位bps（bits per second），常见的波特率9600bps、115200bps等等，其他标准的波特率是1200，2400，4800，19200，38400，57600。举个例子，如果串口波特率设置为9600bps，那么传输一个比特需要的时间是1&#x2F;9600≈104.2us。</p>
<p>以9600，8-N-1（9600波特率，8个数据位，没有校验位，1位停止位）为例，这是目前最常用的串口配置，现在我们传输“O”“K”两个ASCII值，“O”的ASCII为79，对应的二进制数据为<strong>01001111</strong>，“K”对应的二进制数据为<strong>01001011</strong>，传输的格式数据如下图所示：</p>
<p>串口波特率为9600，1bit传输时间大约为104us，传送一个数据实际是10个比特（开始位-8个数据位-停止位），一个bytes传输速率实际为9600*8&#x2F;10&#x3D;7680bps。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>本代码根据正点原子的uart代码修改，主要增加一些中断标志位。</p>
<p>主要实现的功能是：</p>
<p>1.增加接收中断，4byte数据中断，空闲中断。4byte中断是目前使用的主要方式，接收连续数据每4byte内部产生一个中断信号。空闲中断主要用来数据清零和后期拓展。</p>
<p>2.串口发送做了一个4byte的发送fifo缓冲。</p>
<h3 id="顶层代码"><a href="#顶层代码" class="headerlink" title="顶层代码"></a>顶层代码</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> uart_module#</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">parameter</span>     CLK_FRE        = <span class="number">50</span>          ,            <span class="comment">//Mhz</span></span><br><span class="line">    <span class="keyword">parameter</span>     BPS            = <span class="number">9600</span>         ,            <span class="comment">//uart bps</span></span><br><span class="line">    <span class="keyword">parameter</span>     IDLE_CYCLE     = <span class="number">20</span>          ,            <span class="comment">//idle time</span></span><br><span class="line">    <span class="keyword">parameter</span>     REG_SIZE       = <span class="number">32</span>           </span><br><span class="line">)(</span><br><span class="line">    <span class="keyword">input</span>                        sys_clk        ,           <span class="comment">//system clock 50Mhz on board</span></span><br><span class="line">    <span class="keyword">input</span>                        rst_n          ,           <span class="comment">//reset ,low active</span></span><br><span class="line">    <span class="keyword">input</span>                        uart_rx        ,</span><br><span class="line">    <span class="keyword">output</span>                       uart_tx        ,</span><br><span class="line">    <span class="keyword">output</span> [REG_SIZE-<span class="number">1</span>:<span class="number">0</span>]        uart_rx_reg    ,           <span class="comment">//uart reg </span></span><br><span class="line">    <span class="keyword">output</span>                       uart_rx_ready  ,           <span class="comment">//if update ready=1</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>]                 uart_tx_reg    ,</span><br><span class="line">    <span class="keyword">input</span>                        uart_tx_en  </span><br><span class="line">);</span><br><span class="line"><span class="comment">/*******************************************************************/</span></span><br><span class="line"><span class="keyword">wire</span>                             tx_data_valid  ;</span><br><span class="line"><span class="keyword">wire</span>                             tx_data_ready  ;</span><br><span class="line"><span class="keyword">wire</span>                             tx_interrupt   ;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>]                       tx_data        ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span>                             rx_data_valid  ;</span><br><span class="line"><span class="keyword">wire</span>                             rx_data_ready  ;</span><br><span class="line"><span class="keyword">wire</span>                             rx_interrupt   ;</span><br><span class="line"><span class="keyword">wire</span>                             rx_frame_idle  ;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>]                       rx_data        ;</span><br><span class="line"><span class="comment">/*******************************************************************/</span></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>]                      din            ;           <span class="comment">// input wire [31 : 0] din</span></span><br><span class="line"><span class="keyword">wire</span>                            wr_en           ;           <span class="comment">// input wire wr_en</span></span><br><span class="line"><span class="keyword">wire</span>                            rd_en           ;           <span class="comment">// input wire rd_en</span></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>]                      dout            ;           <span class="comment">// output wire [7 : 0] dout</span></span><br><span class="line"><span class="keyword">wire</span>                            full            ;           <span class="comment">// output wire full</span></span><br><span class="line"><span class="keyword">wire</span>                            empty           ;           <span class="comment">// output wire empty</span></span><br><span class="line"><span class="keyword">wire</span>                            valid           ;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//开启接收数据</span></span><br><span class="line"><span class="keyword">assign</span> rx_data_ready = <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//写tx fifo数据</span></span><br><span class="line"><span class="keyword">assign</span> wr_en=uart_tx_en ;</span><br><span class="line"><span class="keyword">assign</span> din=uart_tx_reg  ;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//读tx fifo数据</span></span><br><span class="line"><span class="keyword">assign</span> rd_en=valid&amp;&amp;tx_data_ready;</span><br><span class="line"><span class="keyword">assign</span> tx_data=dout;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="keyword">assign</span> tx_data_valid=valid&amp;&amp;tx_data_ready;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line">uart_rx#</span><br><span class="line">(</span><br><span class="line">    <span class="variable">.CLK_FRE</span>(CLK_FRE),</span><br><span class="line">    <span class="variable">.BAUD_RATE</span>(BPS),</span><br><span class="line">    <span class="variable">.IDLE_CYCLE</span>(IDLE_CYCLE)</span><br><span class="line">) uart_rx_inst</span><br><span class="line">(</span><br><span class="line">    <span class="variable">.clk</span>                        (sys_clk               ),</span><br><span class="line">    <span class="variable">.rst_n</span>                      (rst_n                 ),</span><br><span class="line">    <span class="variable">.rx_data</span>                    (rx_data               ),</span><br><span class="line">    <span class="variable">.rx_data_valid</span>              (rx_data_valid         ),</span><br><span class="line">    <span class="variable">.rx_data_ready</span>              (rx_data_ready         ),</span><br><span class="line">    <span class="variable">.rx_frame_idle</span>              (rx_frame_idle         ),</span><br><span class="line">    <span class="variable">.rx_interrupt</span>               (rx_interrupt          ),</span><br><span class="line">    <span class="variable">.rx_pin</span>                     (uart_rx               )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">uart_tx#</span><br><span class="line">(</span><br><span class="line">    <span class="variable">.CLK_FRE</span>(CLK_FRE),</span><br><span class="line">    <span class="variable">.BAUD_RATE</span>(BPS)</span><br><span class="line">) uart_tx_inst</span><br><span class="line">(</span><br><span class="line">    <span class="variable">.clk</span>                        (sys_clk              ),</span><br><span class="line">    <span class="variable">.rst_n</span>                      (rst_n                ),</span><br><span class="line">    <span class="variable">.tx_data</span>                    (tx_data              ),</span><br><span class="line">    <span class="variable">.tx_data_valid</span>              (tx_data_valid        ),</span><br><span class="line">    <span class="variable">.tx_data_ready</span>              (tx_data_ready        ),</span><br><span class="line">    <span class="variable">.tx_interrupt</span>               (tx_interrupt         ),</span><br><span class="line">    <span class="variable">.tx_pin</span>                     (uart_tx              )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">fifo_tx fifo_tx_inst (</span><br><span class="line">    <span class="variable">.clk</span>                        (sys_clk              ),          <span class="comment">// input wire clk</span></span><br><span class="line">    <span class="variable">.din</span>                        (din                  ),          <span class="comment">// input wire [31 : 0] din</span></span><br><span class="line">    <span class="variable">.wr_en</span>                      (wr_en                ),          <span class="comment">// input wire wr_en</span></span><br><span class="line">    <span class="variable">.rd_en</span>                      (rd_en                ),          <span class="comment">// input wire rd_en</span></span><br><span class="line">    <span class="variable">.dout</span>                       (dout                 ),          <span class="comment">// output wire [7 : 0] dout</span></span><br><span class="line">    <span class="variable">.full</span>                       (full                 ),          <span class="comment">// output wire full</span></span><br><span class="line">    <span class="variable">.empty</span>                      (empty                ),          <span class="comment">// output wire empty</span></span><br><span class="line">    <span class="variable">.valid</span>                      (valid                )           <span class="comment">// output wire valid</span></span><br><span class="line">);</span><br><span class="line">uart_reg #(</span><br><span class="line">    <span class="variable">.REG_SIZE</span>(REG_SIZE)</span><br><span class="line">)uart_reg0</span><br><span class="line">(</span><br><span class="line">    <span class="variable">.clk</span>                        (sys_clk             ),</span><br><span class="line">    <span class="variable">.rst_n</span>                      (rst_n               ),</span><br><span class="line">    <span class="variable">.rx_data</span>                    (rx_data             ),</span><br><span class="line">    <span class="variable">.rx_data_valid</span>              (rx_data_valid       ),</span><br><span class="line">    <span class="variable">.rx_frame_idle</span>              (rx_frame_idle       ),</span><br><span class="line">    <span class="variable">.rx_interrupt</span>               (rx_interrupt        ),</span><br><span class="line">    <span class="variable">.reg_data</span>                   (uart_rx_reg         ),</span><br><span class="line">    <span class="variable">.reg_ready</span>                  (uart_rx_ready       )</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="接收模块"><a href="#接收模块" class="headerlink" title="接收模块"></a>接收模块</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//*******************************************************************************/</span></span><br><span class="line"><span class="keyword">module</span> uart_rx</span><br><span class="line">#(</span><br><span class="line">	<span class="keyword">parameter</span> CLK_FRE       =   <span class="number">50</span>                  ,                                         <span class="comment">//clock frequency(Mhz)</span></span><br><span class="line">	<span class="keyword">parameter</span> BAUD_RATE     =   <span class="number">115200</span>              ,                                     <span class="comment">//serial baud rate</span></span><br><span class="line">    <span class="keyword">parameter</span> IDLE_CYCLE    =    <span class="number">2</span>                                          <span class="comment">//空闲周期</span></span><br><span class="line">)</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">input</span>                        clk                ,                                       <span class="comment">//时钟</span></span><br><span class="line">    <span class="keyword">input</span>                        rst_n              ,                                     <span class="comment">//复位</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">7</span>:<span class="number">0</span>]              rx_data            ,                                   <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>                   rx_data_valid      ,                               <span class="comment">//有效</span></span><br><span class="line">    <span class="keyword">input</span>                        rx_data_ready      ,                               <span class="comment">//完成</span></span><br><span class="line">    <span class="keyword">output</span>                       rx_frame_idle      ,                               <span class="comment">//空闲中断</span></span><br><span class="line">    <span class="keyword">output</span>                       rx_interrupt       ,                               <span class="comment">//接收中断</span></span><br><span class="line">    <span class="keyword">input</span>                        rx_pin                                             <span class="comment">//</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="keyword">localparam</span>      CYCLE           = CLK_FRE * <span class="number">1000000</span> / BAUD_RATE ;     <span class="comment">//bit周期</span></span><br><span class="line"><span class="keyword">localparam</span>      IDLE_TIME       = CYCLE * (IDLE_CYCLE+<span class="number">10</span>)       ;        <span class="comment">//空闲判定时间</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">2</span>:<span class="number">0</span>]                         state              ;</span><br><span class="line"><span class="keyword">reg</span>[<span class="number">2</span>:<span class="number">0</span>]                         next_state         ;</span><br><span class="line"><span class="keyword">localparam</span>                       S_IDLE      = <span class="number">1</span>    ;                           <span class="comment">//空闲</span></span><br><span class="line"><span class="keyword">localparam</span>                       S_START     = <span class="number">2</span>    ;                           <span class="comment">//start bit</span></span><br><span class="line"><span class="keyword">localparam</span>                       S_REC_BYTE  = <span class="number">3</span>    ;                           <span class="comment">//data bits</span></span><br><span class="line"><span class="keyword">localparam</span>                       S_STOP      = <span class="number">4</span>    ;                           <span class="comment">//stop bit</span></span><br><span class="line"><span class="keyword">localparam</span>                       S_DATA      = <span class="number">5</span>    ;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="keyword">reg</span>                              rx_d0              ;                                     <span class="comment">//delay 1 clock for rx_pin</span></span><br><span class="line"><span class="keyword">reg</span>                              rx_d1              ;                                     <span class="comment">//delay 1 clock for rx_d0</span></span><br><span class="line"><span class="keyword">wire</span>                             rx_negedge         ;                                <span class="comment">//数据下降沿 </span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">7</span>:<span class="number">0</span>]                         rx_bits            ;                                   <span class="comment">//接受数据的临时存储</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">15</span>:<span class="number">0</span>]                        cycle_cnt          ;                                 <span class="comment">//baud counter</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">2</span>:<span class="number">0</span>]                         bit_cnt            ;                                    <span class="comment">//bit counter</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		rx_d0 &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">		rx_d1 &lt;= <span class="number">1&#x27;b0</span>;	</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		rx_d0 &lt;= rx_pin;</span><br><span class="line">		rx_d1 &lt;= rx_d0;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> rx_negedge = rx_d1 &amp;&amp; ~rx_d0;  <span class="comment">//下降沿</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		state &lt;= S_IDLE;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		state &lt;= next_state;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">case</span>(state)</span><br><span class="line">		S_IDLE:</span><br><span class="line">			<span class="keyword">if</span>(rx_negedge)</span><br><span class="line">				next_state &lt;= S_START;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next_state &lt;= S_IDLE;</span><br><span class="line">		S_START:</span><br><span class="line">			<span class="keyword">if</span>(cycle_cnt == CYCLE - <span class="number">1</span>)<span class="comment">//一个周期脉冲后，转到接收状态</span></span><br><span class="line">				next_state &lt;= S_REC_BYTE;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next_state &lt;= S_START;</span><br><span class="line">		S_REC_BYTE:</span><br><span class="line">			<span class="keyword">if</span>(cycle_cnt == CYCLE - <span class="number">1</span>  &amp;&amp; bit_cnt == <span class="number">3&#x27;d7</span>)  <span class="comment">//接受完成8bit，转移到停止位</span></span><br><span class="line">				next_state &lt;= S_STOP;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next_state &lt;= S_REC_BYTE;</span><br><span class="line">		S_STOP:</span><br><span class="line">			<span class="keyword">if</span>(cycle_cnt == CYCLE/<span class="number">2</span> - <span class="number">1</span>)<span class="comment">//半位周期，避免错过下一个字节接收器</span></span><br><span class="line">				next_state &lt;= S_DATA;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next_state &lt;= S_STOP;</span><br><span class="line">		S_DATA:</span><br><span class="line">			<span class="keyword">if</span>(rx_data_ready)    <span class="comment">//数据接受完成</span></span><br><span class="line">				next_state &lt;= S_IDLE;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next_state &lt;= S_DATA;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			next_state &lt;= S_IDLE;</span><br><span class="line">	<span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//bit时钟计数</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		cycle_cnt &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>((state == S_REC_BYTE &amp;&amp; cycle_cnt == CYCLE - <span class="number">1</span>) || next_state != state)<span class="comment">//状态跳变时清空，接受状态每一个字节清空一次</span></span><br><span class="line">		cycle_cnt &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cycle_cnt &lt;= cycle_cnt + <span class="number">16&#x27;d1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//bit计数</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		<span class="keyword">begin</span></span><br><span class="line">			bit_cnt &lt;= <span class="number">3&#x27;d0</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(state == S_REC_BYTE)</span><br><span class="line">		<span class="keyword">if</span>(cycle_cnt == CYCLE - <span class="number">1</span>)<span class="comment">//当接受状态的最后bit数+1</span></span><br><span class="line">			bit_cnt &lt;= bit_cnt + <span class="number">3&#x27;d1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			bit_cnt &lt;= bit_cnt;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		bit_cnt &lt;= <span class="number">3&#x27;d0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//锁存bit数据</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		rx_bits &lt;= <span class="number">8&#x27;d0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(state == S_REC_BYTE &amp;&amp; cycle_cnt == CYCLE/<span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">		rx_bits[bit_cnt] &lt;= rx_d1;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		rx_bits &lt;= rx_bits; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//锁存接收到的8bit数据</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span>(!rst_n)</span><br><span class="line">		rx_data &lt;= <span class="number">8&#x27;d0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(state == S_STOP &amp;&amp; next_state != state)</span><br><span class="line">		rx_data &lt;= rx_bits;<span class="comment">//latch received data</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//更新数据准备状态</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		rx_data_valid &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(state == S_IDLE)<span class="comment">//停止位的开始</span></span><br><span class="line">	    rx_data_valid &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		rx_data_valid &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">以下为自行添加的内容</span></span><br><span class="line"><span class="comment">add：</span></span><br><span class="line"><span class="comment">    串口接收中断                    rx_bit_idle</span></span><br><span class="line"><span class="comment">    串口空闲中断                    rx_frame_idle</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//bit中断</span></span><br><span class="line"><span class="keyword">assign</span> rx_interrupt=((state==S_DATA) &amp;&amp; (next_state != state));</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//空闲时间计数</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">31</span>:<span class="number">0</span>]   idle_cnt           ;</span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">        idle_cnt&lt;=<span class="number">1&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!rx_interrupt&amp;&amp;idle_cnt&lt;IDLE_TIME)</span><br><span class="line">        idle_cnt &lt;= idle_cnt + <span class="number">1&#x27;d1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rx_interrupt)<span class="keyword">begin</span></span><br><span class="line">        idle_cnt&lt;=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">//帧空闲标志</span></span><br><span class="line"><span class="keyword">reg</span> frame_idle_flag;</span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">        frame_idle_flag&lt;=<span class="number">1&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(idle_cnt&gt;=IDLE_TIME)<span class="keyword">begin</span></span><br><span class="line">        frame_idle_flag&lt;=<span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        frame_idle_flag&lt;=<span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">//帧空闲标志打拍</span></span><br><span class="line"><span class="keyword">reg</span> frame_idle_flag_n;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">        frame_idle_flag_n&lt;=<span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        frame_idle_flag_n&lt;=frame_idle_flag;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> rx_frame_idle=frame_idle_flag&amp;&amp;~frame_idle_flag_n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="发送模块"><a href="#发送模块" class="headerlink" title="发送模块"></a>发送模块</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//*******************************************************************************/</span></span><br><span class="line"><span class="keyword">module</span> uart_tx</span><br><span class="line">#(</span><br><span class="line">    <span class="keyword">parameter</span> CLK_FRE = <span class="number">50</span>,      <span class="comment">//clock frequency(Mhz)</span></span><br><span class="line">    <span class="keyword">parameter</span> BAUD_RATE = <span class="number">115200</span> <span class="comment">//serial baud rate</span></span><br><span class="line">)</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">input</span>                        clk            ,           <span class="comment">//clock input</span></span><br><span class="line">    <span class="keyword">input</span>                        rst_n          ,           <span class="comment">//asynchronous reset input, low active </span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>]                  tx_data        ,           <span class="comment">//data to send</span></span><br><span class="line">    <span class="keyword">input</span>                        tx_data_valid  ,           <span class="comment">//data to be sent is valid</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>                   tx_data_ready  ,           <span class="comment">//send ready</span></span><br><span class="line">    <span class="keyword">output</span>                       tx_interrupt   ,</span><br><span class="line">    <span class="keyword">output</span>                       tx_pin                     <span class="comment">//serial data output</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">localparam</span>                       CYCLE = CLK_FRE * <span class="number">1000000</span> / BAUD_RATE;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//状态机</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">2</span>:<span class="number">0</span>]                         state          ;</span><br><span class="line"><span class="keyword">reg</span>[<span class="number">2</span>:<span class="number">0</span>]                         next_state     ;</span><br><span class="line"><span class="keyword">localparam</span>          S_IDLE       = <span class="number">1</span>            ;<span class="comment">//空闲</span></span><br><span class="line"><span class="keyword">localparam</span>          S_START      = <span class="number">2</span>            ;<span class="comment">//起始位</span></span><br><span class="line"><span class="keyword">localparam</span>          S_SEND_BYTE  = <span class="number">3</span>            ;<span class="comment">//数据位</span></span><br><span class="line"><span class="keyword">localparam</span>          S_STOP       = <span class="number">4</span>            ;<span class="comment">//停止位</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">15</span>:<span class="number">0</span>]                        cycle_cnt      ; <span class="comment">//波特率计数</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">2</span>:<span class="number">0</span>]                         bit_cnt        ;<span class="comment">//数据计数</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">7</span>:<span class="number">0</span>]                         tx_data_latch  ; <span class="comment">//数据</span></span><br><span class="line"><span class="keyword">reg</span>                              tx_reg         ;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="keyword">assign</span> tx_pin = tx_reg;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		state &lt;= S_IDLE;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		state &lt;= next_state;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">case</span>(state)</span><br><span class="line">		S_IDLE:</span><br><span class="line">			<span class="keyword">if</span>(tx_data_valid == <span class="number">1&#x27;b1</span>)</span><br><span class="line">				next_state &lt;= S_START;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next_state &lt;= S_IDLE;</span><br><span class="line">		S_START:</span><br><span class="line">			<span class="keyword">if</span>(cycle_cnt == CYCLE - <span class="number">1</span>)</span><br><span class="line">				next_state &lt;= S_SEND_BYTE;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next_state &lt;= S_START;</span><br><span class="line">		S_SEND_BYTE:</span><br><span class="line">			<span class="keyword">if</span>(cycle_cnt == CYCLE - <span class="number">1</span>  &amp;&amp; bit_cnt == <span class="number">3&#x27;d7</span>)</span><br><span class="line">				next_state &lt;= S_STOP;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next_state &lt;= S_SEND_BYTE;</span><br><span class="line">		S_STOP:</span><br><span class="line">			<span class="keyword">if</span>(cycle_cnt == CYCLE - <span class="number">1</span>)</span><br><span class="line">				next_state &lt;= S_IDLE;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				next_state &lt;= S_STOP;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			next_state &lt;= S_IDLE;</span><br><span class="line">	<span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//波特率产生</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		cycle_cnt &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>((state == S_SEND_BYTE &amp;&amp; cycle_cnt == CYCLE - <span class="number">1</span>) || next_state != state)</span><br><span class="line">		cycle_cnt &lt;= <span class="number">16&#x27;d0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cycle_cnt &lt;= cycle_cnt + <span class="number">16&#x27;d1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//检测到起始信号，锁存数据</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		<span class="keyword">begin</span></span><br><span class="line">			tx_data_latch &lt;= <span class="number">8&#x27;d0</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(state == S_IDLE &amp;&amp; tx_data_valid == <span class="number">1&#x27;b1</span>)</span><br><span class="line">			tx_data_latch &lt;= tx_data;</span><br><span class="line">		</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//数据计数</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		<span class="keyword">begin</span></span><br><span class="line">			bit_cnt &lt;= <span class="number">3&#x27;d0</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(state == S_SEND_BYTE)</span><br><span class="line">		<span class="keyword">if</span>(cycle_cnt == CYCLE - <span class="number">1</span>)</span><br><span class="line">			bit_cnt &lt;= bit_cnt + <span class="number">3&#x27;d1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			bit_cnt &lt;= bit_cnt;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		bit_cnt &lt;= <span class="number">3&#x27;d0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		tx_reg &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">case</span>(state)</span><br><span class="line">			S_IDLE,S_STOP:</span><br><span class="line">				tx_reg &lt;= <span class="number">1&#x27;b1</span>; </span><br><span class="line">			S_START:</span><br><span class="line">				tx_reg &lt;= <span class="number">1&#x27;b0</span>; </span><br><span class="line">			S_SEND_BYTE:</span><br><span class="line">				tx_reg &lt;= tx_data_latch[bit_cnt];</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				tx_reg &lt;= <span class="number">1&#x27;b1</span>; </span><br><span class="line">		<span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="comment">//刷新状态</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)</span><br><span class="line">		<span class="keyword">begin</span></span><br><span class="line">			tx_data_ready &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(state == S_IDLE&amp;&amp;tx_data_valid == <span class="number">1&#x27;b0</span>)</span><br><span class="line">			tx_data_ready &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			tx_data_ready &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"><span class="keyword">reg</span> tx_interrupt_r;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">      tx_interrupt_r&lt;=<span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(state == S_STOP &amp;&amp; cycle_cnt == CYCLE - <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">        tx_interrupt_r&lt;=<span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">      tx_interrupt_r&lt;=<span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> tx_interrupt=tx_interrupt_r;</span><br><span class="line"><span class="keyword">endmodule</span> </span><br></pre></td></tr></table></figure>

<h3 id="接收寄存器"><a href="#接收寄存器" class="headerlink" title="接收寄存器"></a>接收寄存器</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> uart_reg #(</span><br><span class="line">    <span class="keyword">parameter</span>     REG_SIZE       = <span class="number">32</span></span><br><span class="line">)(</span><br><span class="line">    <span class="keyword">input</span>                   clk                 ,</span><br><span class="line">    <span class="keyword">input</span>                   rst_n               ,</span><br><span class="line">    <span class="keyword">input</span>  [<span class="number">7</span>:<span class="number">0</span>]            rx_data             ,</span><br><span class="line">    <span class="keyword">input</span>                   rx_data_valid       ,</span><br><span class="line">    <span class="keyword">input</span>                   rx_frame_idle       ,</span><br><span class="line">    <span class="keyword">input</span>                   rx_interrupt        ,</span><br><span class="line">    <span class="keyword">output</span>  [REG_SIZE-<span class="number">1</span>:<span class="number">0</span>]  reg_data            ,</span><br><span class="line">    <span class="keyword">output</span>                  reg_ready           </span><br><span class="line">);</span><br><span class="line"><span class="keyword">reg</span> [REG_SIZE-<span class="number">1</span>:<span class="number">0</span>]uart_reg_r;</span><br><span class="line"><span class="comment">/**************************************************************/</span></span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">      uart_reg_r&lt;=<span class="number">255&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rx_interrupt)<span class="keyword">begin</span></span><br><span class="line">      uart_reg_r&lt;=&#123;uart_reg_r,rx_data&#125;;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rx_frame_idle)<span class="keyword">begin</span></span><br><span class="line">      uart_reg_r&lt;=uart_reg_r;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/**************************************************************/</span></span><br><span class="line"><span class="comment">//计数</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>]data_cnt;</span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">      data_cnt&lt;=<span class="number">8&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rx_interrupt)<span class="keyword">begin</span></span><br><span class="line">      data_cnt&lt;=data_cnt+<span class="number">1&#x27;d1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rx_frame_idle||data_cnt==<span class="number">8&#x27;d4</span>)<span class="keyword">begin</span></span><br><span class="line">      data_cnt&lt;=<span class="number">8&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/**************************************************************/</span></span><br><span class="line"><span class="comment">//生成信号</span></span><br><span class="line"><span class="keyword">reg</span> [REG_SIZE-<span class="number">1</span>:<span class="number">0</span>]reg_data_r;</span><br><span class="line"><span class="keyword">reg</span> reg_ready_r;</span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n)<span class="keyword">begin</span></span><br><span class="line">      reg_data_r&lt;=<span class="number">255&#x27;d0</span>;</span><br><span class="line">      reg_ready_r&lt;=<span class="number">1&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(data_cnt==<span class="number">8&#x27;d4</span>)<span class="keyword">begin</span></span><br><span class="line">      reg_data_r&lt;=uart_reg_r;</span><br><span class="line">      reg_ready_r&lt;=<span class="number">1&#x27;d1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        reg_ready_r&lt;=<span class="number">1&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">/**************************************************************/</span></span><br><span class="line"><span class="keyword">assign</span> reg_ready =reg_ready_r;</span><br><span class="line"><span class="keyword">assign</span> reg_data   =reg_data_r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="例化测试"><a href="#例化测试" class="headerlink" title="例化测试"></a>例化测试</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] UART_REG;           <span class="comment">//32位串口寄存器</span></span><br><span class="line"><span class="keyword">wire</span> uart_ready_flag;           <span class="comment">//串口指令ready信号</span></span><br><span class="line"><span class="keyword">wire</span> sync_uart_ready_flag;      <span class="comment">//同步串口指令ready信号</span></span><br><span class="line"><span class="comment">//串口</span></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>]                 uart_tx_reg;</span><br><span class="line"><span class="keyword">wire</span>  uart_tx_en;</span><br><span class="line"></span><br><span class="line">uart_module uart0(</span><br><span class="line">    <span class="variable">.sys_clk</span>        (CLK_UART_50M       ),</span><br><span class="line">    <span class="variable">.rst_n</span>          (RST_N              ),</span><br><span class="line">    <span class="variable">.uart_rx</span>        (UART_RX            ),</span><br><span class="line">    <span class="variable">.uart_tx</span>        (UART_TX            ),</span><br><span class="line">    <span class="variable">.uart_rx_reg</span>    (UART_REG           ),</span><br><span class="line">    <span class="variable">.uart_rx_ready</span>  (uart_ready_flag    ),</span><br><span class="line">    <span class="variable">.uart_tx_reg</span>    (UART_REG           ),</span><br><span class="line">    <span class="variable">.uart_tx_en</span>     (uart_ready_flag    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>verilog</category>
        <category>协议</category>
      </categories>
      <tags>
        <tag>uart</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>VIVADO使用VScode作为文本编辑器的注意事项</title>
    <url>/2022/10/15/viado%E4%BD%BF%E7%94%A8VScode/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>记录vivado使用VScode作为文本编辑器时的设置和bug处理方式。</p>
<h1 id="设置VScode为vivado的代码编辑器（待编写）"><a href="#设置VScode为vivado的代码编辑器（待编写）" class="headerlink" title="设置VScode为vivado的代码编辑器（待编写）"></a>设置VScode为vivado的代码编辑器（待编写）</h1><h1 id="功能：代码格式化功能-待编写"><a href="#功能：代码格式化功能-待编写" class="headerlink" title="功能：代码格式化功能(待编写)"></a>功能：代码格式化功能(待编写)</h1><h1 id="BUG-用VScode打开代码经常卡死，磁盘占用拉满"><a href="#BUG-用VScode打开代码经常卡死，磁盘占用拉满" class="headerlink" title="BUG:用VScode打开代码经常卡死，磁盘占用拉满"></a>BUG:用VScode打开代码经常卡死，磁盘占用拉满</h1><p>原因是vivado没有正常解析VScode的启动命令。解决的方法也很简单只要把Text Editor的启动命令改成下面这段命令就可以了。</p>
<p><code>cmd /S /k &quot;code -g [file name]:[line number]&quot;</code>。注意引号也要带上。作用是以文本的方式读取启动命令。</p>
<p><img src="https://kulya-pic.oss-cn-shanghai.aliyuncs.com/202210151053317.png" alt="221015_105305"></p>
]]></content>
      <categories>
        <category>vivado</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>vivado</tag>
      </tags>
  </entry>
  <entry>
    <title>VIVADO使用ILA在线调试</title>
    <url>/2022/10/15/viado%E4%BD%BF%E7%94%A8ila%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h1 id="dubug-hub的时钟频率和JTAG时钟频率的关系"><a href="#dubug-hub的时钟频率和JTAG时钟频率的关系" class="headerlink" title="dubug_hub的时钟频率和JTAG时钟频率的关系"></a>dubug_hub的时钟频率和JTAG时钟频率的关系</h1><p>在上板调试的时候，我们是通过JTAG时钟和fpga通信的。相关的ila波形数据，位流的下载也是通过JTAG进行的。<br>ila对JTAG时钟频率有要求：<strong>dubug_hub的时钟频率应该是JTAG时钟频率的2.5倍之上</strong>。<br>JTAG时钟频率可以在vivado界面调整。但是过低的JTAG时钟频率会导致下载位流的时间过长，这是我们无法忍受的。<br>JTAG默认时钟频率15M，算出dubug_hub最低时钟37.5M.<br>所以在进行设计的时候，应该保证上述时钟频率关系。</p>
<h1 id="ila时钟频率和被采样时钟频率"><a href="#ila时钟频率和被采样时钟频率" class="headerlink" title="ila时钟频率和被采样时钟频率"></a>ila时钟频率和被<a href="https://so.csdn.net/so/search?q=%E9%87%87%E6%A0%B7&spm=1001.2101.3001.7020">采样</a>时钟频率</h1><p><strong>根据采样定理ila时钟频率最好时被采样时钟频率的4倍以上</strong>，才可以得到比较好的时钟波形。但是我们只要看时钟是否work就行。只要ila时钟频率比被采样时钟频率高2倍就可以了。</p>
]]></content>
      <categories>
        <category>vivado</category>
      </categories>
      <tags>
        <tag>vivado</tag>
      </tags>
  </entry>
  <entry>
    <title>VIVADO报错Invalid option value specified for &#39;-files&#39;.解决办法。</title>
    <url>/2022/10/14/viado%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>解决方法是在设置中取消勾选<code>Use Core Containers for IP</code>。</p>
<p><img src="https://kulya-pic.oss-cn-shanghai.aliyuncs.com/202210150104839.png" alt="221015_010153"></p>
]]></content>
      <categories>
        <category>vivado</category>
      </categories>
      <tags>
        <tag>vivado</tag>
      </tags>
  </entry>
</search>
